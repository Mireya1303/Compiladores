AFN:
0i --> 1[�] --> 7[�]
1 --> 2[�] --> 4[�]
2 --> 3[a]
3 --> 6[�]
4 --> 5[b]
5 --> 6[�]
6 --> 1[�] --> 7[�]
7 --> 8[a]
8 --> 9[�] --> 11[�]
9 --> 10[a]
10 --> 9[�] --> 11[�]
11 --> 12[�] --> 14[�]
12 --> 13[c]
13 --> 16f[�]
14 --> 15[�]
15 --> 16f[�]
16f

Estados	a	b	c	�	
0i				[1, 7]	
1				[2, 4]	
2	3				
3				6	
4		5			
5				6	
6				[1, 7]	
7	8				
8				[9, 11]	
9	10				
10				[9, 11]	
11				[12, 14]	
12			13		
13				16	
14				15	
15				16	
16f					

Derivaciones:
-------------------------------------

ExprecionRegular -> Concatenar R1
Concatenar -> Grupo R2
Grupo -> Elemento Operador
Elemento -> "(" ExprecionRegular ")"
ExprecionRegular -> Concatenar R1
Concatenar -> Grupo R2
Grupo -> Elemento Operador
Elemento -> SimpleElemento
SimpleElemento -> a
Operador -> �
R2 -> �
R1 -> "|" Concatenar R1
Concatenar -> Grupo R2
Grupo -> Elemento Operador
Elemento -> SimpleElemento
SimpleElemento -> b
Operador -> �
R2 -> �
R1 -> �
Operador -> *
R2 -> Grupo R2
Grupo -> Elemento Operador
Elemento -> SimpleElemento
SimpleElemento -> a
Operador -> +
R2 -> Grupo R2
Grupo -> Elemento Operador
Elemento -> SimpleElemento
SimpleElemento -> c
Operador -> ?
R2 -> �
R1 -> �

AFD:
0i --> 1f[a] --> 2[b]
1f --> 3f[a] --> 2[b] --> 4f[c]
2 --> 1f[a] --> 2[b]
3f --> 3f[a] --> 2[b] --> 4f[c]
4f

Estados AFD:
0i --> [0i, 1, 2, 4, 7]
1f --> [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 14, 15, 16f]
2 --> [1, 2, 4, 5, 6, 7]
3f --> [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16f]
4f --> [13, 16f]

Estados del AFN		Estados		a		b		c		
[0i, 1, 2, 4, 7]		0i		1		2				
[1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 14, 15, 16f]		1f		3		2		4		
[1, 2, 4, 5, 6, 7]		2		1		2				
[1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16f]		3f		3		2		4		
[13, 16f]		4f								

Conjuntos estados producidos:
CALCULO DE CONJUNTOS DE ESTADOS
-------------------------------

cerradura(0i) = [0i, 1, 2, 4, 7]

cerradura(mover([0i, 1, 2, 4, 7], a)) = cerradura([3, 8]) = [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 14, 15, 16f]
cerradura(mover([0i, 1, 2, 4, 7], b)) = cerradura([5]) = [1, 2, 4, 5, 6, 7]
cerradura(mover([0i, 1, 2, 4, 7], c)) = cerradura([]) = []

cerradura(mover([1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 14, 15, 16f], a)) = cerradura([3, 8, 10]) = [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16f]
cerradura(mover([1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 14, 15, 16f], b)) = cerradura([5]) = [1, 2, 4, 5, 6, 7]
cerradura(mover([1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 14, 15, 16f], c)) = cerradura([13]) = [13, 16f]

cerradura(mover([1, 2, 4, 5, 6, 7], a)) = cerradura([3, 8]) = [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 14, 15, 16f]
cerradura(mover([1, 2, 4, 5, 6, 7], b)) = cerradura([5]) = [1, 2, 4, 5, 6, 7]
cerradura(mover([1, 2, 4, 5, 6, 7], c)) = cerradura([]) = []

cerradura(mover([1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16f], a)) = cerradura([3, 8, 10]) = [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16f]
cerradura(mover([1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16f], b)) = cerradura([5]) = [1, 2, 4, 5, 6, 7]
cerradura(mover([1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16f], c)) = cerradura([13]) = [13, 16f]

cerradura(mover([13, 16f], a)) = cerradura([]) = []
cerradura(mover([13, 16f], b)) = cerradura([]) = []
cerradura(mover([13, 16f], c)) = cerradura([]) = []

AFD Original:
0i --> 1f[a] --> 2[b]
1f --> 3f[a] --> 2[b] --> 4f[c]
2 --> 1f[a] --> 2[b]
3f --> 3f[a] --> 2[b] --> 4f[c]
4f

AFD Post Inalcanzables (==):
0i --> 1f[a] --> 2[b]
1f --> 3f[a] --> 2[b] --> 4f[c]
2 --> 1f[a] --> 2[b]
3f --> 3f[a] --> 2[b] --> 4f[c]
4f

AFD Post Minimizacion:
(0 2)i --> (1 3)f[a] --> (0 2)i[b]
(1 3)f --> (1 3)f[a] --> (0 2)i[b] --> (4)f[c]
(4)f

AFD Post Identidades (==):
(0 2)i --> (1 3)f[a] --> (0 2)i[b]
(1 3)f --> (1 3)f[a] --> (0 2)i[b] --> (4)f[c]
(4)f


Particiones:
PROCESO DE MINIMIZACION
-----------------------------

Antes de eliminar inalcanzables:   [0i, 1f, 2, 3f, 4f]
Despues de eliminar inalcanzables: [0i, 1f, 2, 3f, 4f]

Particion: [[0i, 2], [1f, 3f, 4f]]
Particion: [[0i, 2], [1f, 3f], [4f]]
Particion: [[0i, 2], [1f, 3f], [4f]]

Antes de eliminar identidades:   [(0 2)i, (1 3)f, (4)f]
Despues de eliminar identidades: [(0 2)i, (1 3)f, (4)f]

